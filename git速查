git命令：
查工作量：
git log --since="2020-6-28" --before="2020-7-05" --author="$(git config --get user.name)" --pretty=tformat: --numstat | gawk '{ add += $1 ; subs += $2 ; loc += $1 - $2 } END { printf "added lines: %s removed lines : %s total lines: %s\n",add,subs,loc }'
# 初始化仓库
git init	
# 废除还没有提交到暂存区的修改
git checkout -- file1 
# 添加到暂存区
git add
# 将暂存区的代码unstage，就是恢复到提交区的状态
git reset HEAD file  
# 提交
git commit -m "commit comments"
# 查看当前仓库状态
git status
# 当前仓库日志
git log
# 每个commit只显示一行的日志
git log --pretty=oneline
# 退回上一个版本
git reset --hard HEAD^
# 按照commit哈希回退
git reset --hard 681B
# git的操作记录
git reflog
# 如何删除某一文件
git rm file1 & git commit -m "delete file1"  #delete file1 from repo
# 如何恢复删除的文件
rm file1 & git checkout -- file1		# 恢复删掉的文件
# 创建分支以及切换分支
git branch dev & git checkout dev   =  get checkout -b dev   # create new branch
# 显示当前仓库所有分支
git branch  #show all branches
# 合并分支并删除分支
git checkout master			# return to master branch
git checkout master & git merge dev	# merge dev branch to current branch
git branch -d dev 			# delete dev branch

# 如何解决合并冲突
## if there are some conflicts when merging
git branch master & git merge dev
# confront some conflicts
# fix these conflicts manually
git add file & git commit -m "conflicts fixed"
#complete merge
 
# 打印日志
git log --graph --pretty=oneline --abbrev-commit		# show log graphlly
## 按照自定义格式打印
 git log --pretty=format:'commit %h by %an %n %as' --graph --abbrev-commit

# 当在自己的分支开发的时候，老板要你立刻在master上解决的bug，正确的处理方式
# when working on dev branch
git stash		# stash the current sorking place
git checkout master
git checkout -b issue-101
# modify some bugs
git add file & git commit -m "fixed bugs"
git checkout master & git merge -m "merged bug fix 101"		# merge to master branch
git checkout dev 
git stash pop						# restore working place
git cherry-pick <commit-id>					# sync the fixed bugs to current branch

# 强行删除分支
git branch -D branch

# 当在分支bra1修改了内容，没有暂存和提交，直接用checkout -b bra2, 那么修改的记录将会转移到新分支，原分支将会
# 恢复版本库的状态

# 删除远程关联
git remote remove xxx

# 关联远程库
git push --set-upstream origin dev

# 推送到远程仓库
git push -u dev

# 用户及权限
## 设置local用户名，进入仓库，执行git config --local user.name xxx user.email xxx
## 查看local用户，进入仓库，执行git config -l最后几行会显示user.name, user.email
## 查看global用户，执行git config -l中间几行显示


# 如果git pull后，如何撤销
## 因为有可能pull到很多次commit，所以上一个本地版本不一定是HEAD^
## 用git reflog查看本地仓库的历史信息，HEAD@{1}就是之前本地的版本，用git reset --hard HEAD@{1}即可
## 要是不放心，可以用 git reflog --pretty=format:'commit %h by %an %n %as'和git log的输出做对比。

# 拉取本地没有的一个远程分支
git pull origin branchName:branchName （远程分支名：要创建的本地分支名）
